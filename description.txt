所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等，Git也不例外，版本控制系统可以告诉你每次的改动，比如第几行添加了什么删除了什么。而图片，视频这些二进制文件，版本控制系统只能追踪他们大小变化，到底改了什么改在哪里，版本控制系统没法追踪。
Microsoft的Word格式就是二进制格式，所以版本控制是没法跟踪Word文件改动的

Git安装完之后要做最后一步设置，在bash下输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

把文件往Git版本库里添加的时候，分两步执行：
git add filename(加后缀名)           #把文件添加到暂存区
git commit filename(加后缀名)        #把暂存区的所有内容提交到当前分支

git status 命令能让我们时刻掌握仓库当前的状态，比如：某文件被修改了，但是还没有add和commit

git diff 顾名思义就是查看difference，查看仓库哪些变动，比如某文件哪里做了改动（添加或是删除）

如果git status 告诉你有文件被修改过，用git diff查看修改内容

回退到某版本使用reset命令，比如回退到上一个版本 git reset --hard HEAD^

在Git中使用HEAD表示当前版本，也就是最新提交的那个，上一个版本是HEAD^,上上个版本是HEAD^^,往上N个可以写成HEAD~N
(纠正：在Git中使用HEAD表示当前分支)

定位到某版本，在知道commit id(版本号)的情况下可以这样：git reset --hard commit_id

如果不知道版本号可以使用git reflog命令，该命令用来记录你做过的每一次命令
要重返历史版本，用git reflog查看命令历史，以便确定要回到未来哪个版本

git log命令显示从最近到最远的提交日志，git log --pretty=oneline可以简化提交日志的输出
用git log查看提交历史，以便确定要回退到哪个版本

git diff HEAD -- filename(加后缀名)  该命令用来查看工作区和版本库里面最新版本的区别

git checkout -- filename(加后缀名)   该命令用来把文件在工作区的修改全部撤销，这里有两种情况：
1、file自修改后还没有被放到暂存区，撤销修改后就回到和版本库一模一样的状态
2、file已经添加到暂存区，又做了修改，现在撤销修改就回到添加到暂存区后的状态
总之让这个文件回到了最近一次git add或git commit时的状态

如果文件修改后已经添加到暂存区，要把暂存区的修改撤销掉可以使用如下命令：
git reset HEAD filename(加后缀名)

git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区

关于撤销修改总结：
场景一：当你改乱了工作区某个文件的内容，想要丢弃工作区的修改时，
	用命令git checkout -- filename(加后缀)
场景二：当你改乱了工作区某个文件的内容，并且还添加到了暂存区，分两步，
	第一步用命令git reset HEAD filename(加后缀)，就回到了场景一
	第二步按场景一操作
场景三：已经提交了不合适的修改到版本库，想要撤销本次操作，可使用git reset命令来实现版本回退

git rm filename(加后缀) 和git commit -m "description"命令用来删除文件


将本地Git仓库关联GitHub上的远程仓库：
1、首先登陆GitHub创建一个新的仓库
2、在本地仓库下：
	$ git remote add origin https://github.com/ZEROZhuLing/learngit.git
	或者是：$ git remote add origin git@github.com:ZEROZhuLing/learngit.git
		其中，ZEROZhuLing是你自己的GitHub的名字，learngit是你远程仓库的名字
		添加后，远程库的名字就是origin，也可以改成别的名字，但这是Git默认的叫法
3、把本地库的所有内容推送到远程库上
	$ git push -u origin master
		把本地库的内容推送到远程库用git push命令，实际上把当前master分支推送到远程。
		由于远程库是空的，第一次推送时master分支时加上了-u参数，Git不但会把本地库的master分支内容推送到远程库的master分支，还会把本地库的master分支与远程库的master分支关联起来。在以后的推送或者拉取时就可以简化命令，不用加-u
4、从现在起，只要本地做了提交，就可以通过命令：$ git push origin master把本地的master分支的最新修改推送至GitHub

从远程仓库克隆：
1、先在GitHub上创建远程仓库,比如名称为：gitskills
2、在本地用bash命令在某个文件夹d下用如下命令：
	$ git clone git@github.com:ZEROZhuLing/gitskills.git
3、之后便在该文件夹d下就多了一个子文件夹gitskills,可以使用一下两个命令查看gitskills
	cd gitskills
	ls

分支管理：
分支的作用：假如你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码会导致别人不能继续干活了，如果等代码全部写完再一次提交，就又会存在丢失每天进度的巨大风险。这就需要分支，你创建了一个属于自己的分支，别人看不到，还继续在原来的分支上工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样既安全又不影响别人工作。

1、首先创建分支dev，然后切换到dev分支
	$ git checkout -b dev
	git checkout命令加上-b参数表示创建分支并切换，相当于以下两条命令：
		$ git branch dev     //创建dev分支
		$ git checkout dev   //切换到dev分支
2、$ git branch 查看所有分支，当前分支前面会标有一个*号
3、把dev分支的工作成果合并到master分支上，用以下命令：
	$ git merge dev
4、删除分支dev
	$ git branch -d dev

